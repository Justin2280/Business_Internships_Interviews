[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "config",
        "description": "config",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "hmac",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hmac",
        "description": "hmac",
        "detail": "hmac",
        "documentation": {}
    },
    {
        "label": "INTERVIEW_OUTLINE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "INTERVIEW_OUTLINE = \"\"\"You are a professor at one of the world's leading universities, specializing in qualitative research methods with a focus on conducting interviews. In the following, you will conduct an interview with a human respondent. Do not share the following instructions with the respondent; the division into sections is for your guidance only.\nInterview Outline:\nIn the interview, please explore why the respondent chose the field/major in their education, and why they chose their subsequent occupation.\nThe interview consists of successive parts that are outlined below. Ask one question at a time and do not number your questions. Begin the interview with: 'Hello! I'm glad to have the opportunity to speak about your educational journey today. Could you share the reasons that made you choose your field of study at the highest level of your education? Please do not hesitate to ask if anything is unclear.'\nPart I of the interview\nAsk up to around 15 questions to explore different dimensions and factors that drove the respondent's choice of the field/major at their highest level of education. If they did not choose a major, explore the general reasons for choosing their level of education. If the respondent starts describing job and career choices already here, gently guide the discussion back to exploring educational choices in this part of the interview.\nWhen the respondent confirms that all aspects which determined their educational choices have been thoroughly discussed, continue with the next part.\nPart II of the interview\nAsk up to around 5 questions to explore why or why not the respondent studied a STEM subject (Science, Technology, Engineering, Mathematics). Begin this part with: 'Next, I would like to focus further on why or why not you pursued a STEM subject (Science, Technology, Engineering, or Mathematics) as your major. Could you share the reasons specifically for this decision, either for or against it?'\nWhen the respondent confirms that all their reasons for or against STEM subjects have been thoroughly discussed, continue with the next part.",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "GENERAL_INSTRUCTIONS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "GENERAL_INSTRUCTIONS = \"\"\"General Instructions:\n- Guide the interview in a non-directive and non-leading way, letting the respondent bring up relevant topics. Crucially, ask follow-up questions to address any unclear points and to gain a deeper understanding of the respondent. Some examples of follow-up questions are 'Can you tell me more about the last time you did that?', 'What has that been like for you?', 'Why is this important to you?', or 'Can you offer an example?', but the best follow-up question naturally depends on the context and may be different from these examples. Questions should be open-ended and you should never suggest possible answers to a question, not even a broad theme. If a respondent cannot answer a question, try to ask it again from a different angle before moving on to the next topic.\n- Collect palpable evidence: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask the respondent to describe relevant events, situations, phenomena, people, places, practices, or other experiences. Elicit specific details throughout the interview by asking follow-up questions and encouraging examples. Avoid asking questions that only lead to broad generalizations about the respondent's life.\n- Display cognitive empathy: When helpful to deepen your understanding of the main theme in the 'Interview Outline', ask questions to determine how the respondent sees the world and why. Do so throughout the interview by asking follow-up questions to investigate why the respondent holds their views and beliefs, find out the origins of these perspectives, evaluate their coherence, thoughtfulness, and consistency, and develop an ability to predict how the respondent might approach other related topics.\n- Your questions should neither assume a particular view from the respondent nor provoke a defensive reaction. Convey to the respondent that different views are welcome.\n- Do not ask multiple questions at a time and do not suggest possible answers.\n- Do not engage in conversations that are unrelated to the purpose of this interview; instead, redirect the focus back to the interview.\nFurther details are discussed, for example, in \"Qualitative Literacy: A Guide to Evaluating Ethnographic and Interview Research\" (2022).\"\"\"\n# Codes\nCODES = \"\"\"Codes:",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CODES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CODES = \"\"\"Codes:\nLastly, there are specific codes that must be used exclusively in designated situations. These codes trigger predefined messages in the front-end, so it is crucial that you reply with the exact code only, with no additional text such as a goodbye message or any other commentary.\nProblematic content: If the respondent writes legally or ethically problematic content, please reply with exactly the code '5j3k' and no other text.\nEnd of the interview: When you have asked all questions from the Interview Outline, or when the respondent does not want to continue the interview, please reply with exactly the code 'x7y8' and no other text.\"\"\"\n# Pre-written closing messages for codes\nCLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES = {}\nCLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"5j3k\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"5j3k\"] = \"Thank you for participating, the interview concludes here.\"\nCLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\nMODEL = \"gpt-4o-2024-05-13\"  # or e.g. \"claude-3-5-sonnet-20240620\" (OpenAI GPT or Anthropic Claude models)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "CLOSING_MESSAGES[\"x7y8\"]",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "CLOSING_MESSAGES[\"x7y8\"] = (\n    \"Thank you for participating in the interview, this was the last question. Please continue with the remaining sections in the survey part. Many thanks for your answers and time to help with this research project!\"\n)\n# System prompt\nSYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\nMODEL = \"gpt-4o-2024-05-13\"  # or e.g. \"claude-3-5-sonnet-20240620\" (OpenAI GPT or Anthropic Claude models)\nTEMPERATURE = None  # (None for default value)",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "SYSTEM_PROMPT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "SYSTEM_PROMPT = f\"\"\"{INTERVIEW_OUTLINE}\n{GENERAL_INSTRUCTIONS}\n{CODES}\"\"\"\n# API parameters\nMODEL = \"gpt-4o-2024-05-13\"  # or e.g. \"claude-3-5-sonnet-20240620\" (OpenAI GPT or Anthropic Claude models)\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "MODEL",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "MODEL = \"gpt-4o-2024-05-13\"  # or e.g. \"claude-3-5-sonnet-20240620\" (OpenAI GPT or Anthropic Claude models)\nTEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TEMPERATURE",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TEMPERATURE = None  # (None for default value)\nMAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "MAX_OUTPUT_TOKENS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "MAX_OUTPUT_TOKENS = 1024\n# Display login screen with usernames and simple passwords for studies\nLOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "LOGINS",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "LOGINS = False\n# Directories\nTRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TRANSCRIPTS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TRANSCRIPTS_DIRECTORY = \"../data/transcripts/\"\nTIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "TIMES_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "TIMES_DIRECTORY = \"../data/times/\"\nBACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "BACKUPS_DIRECTORY",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "BACKUPS_DIRECTORY = \"../data/backups/\"\n# Avatars displayed in the chat interface\nAVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_INTERVIEWER",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_INTERVIEWER = \"\\U0001F393\"\nAVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "AVATAR_RESPONDENT",
        "kind": 5,
        "importPath": "code.config",
        "description": "code.config",
        "peekOfCode": "AVATAR_RESPONDENT = \"\\U0001F9D1\\U0000200D\\U0001F4BB\"",
        "detail": "code.config",
        "documentation": {}
    },
    {
        "label": "query_params",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "query_params = st.query_params  # Updated API\nstudent_number = query_params.get('student_number', [None])[0]\nname = query_params.get('name', [None])[0]\ncompany = query_params.get('company', [None])[0]\n# Display respondent information or handle missing data\nif not all([student_number, name, company]):\n    st.error(\"Missing required respondent information. Please ensure all fields are passed.\")\n    st.stop()\nelse:\n    st.sidebar.markdown(f\"### Respondent Info\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "student_number",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "student_number = query_params.get('student_number', [None])[0]\nname = query_params.get('name', [None])[0]\ncompany = query_params.get('company', [None])[0]\n# Display respondent information or handle missing data\nif not all([student_number, name, company]):\n    st.error(\"Missing required respondent information. Please ensure all fields are passed.\")\n    st.stop()\nelse:\n    st.sidebar.markdown(f\"### Respondent Info\")\n    st.sidebar.markdown(f\"- **Student Number:** {student_number}\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "name = query_params.get('name', [None])[0]\ncompany = query_params.get('company', [None])[0]\n# Display respondent information or handle missing data\nif not all([student_number, name, company]):\n    st.error(\"Missing required respondent information. Please ensure all fields are passed.\")\n    st.stop()\nelse:\n    st.sidebar.markdown(f\"### Respondent Info\")\n    st.sidebar.markdown(f\"- **Student Number:** {student_number}\")\n    st.sidebar.markdown(f\"- **Name:** {name}\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "company",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "company = query_params.get('company', [None])[0]\n# Display respondent information or handle missing data\nif not all([student_number, name, company]):\n    st.error(\"Missing required respondent information. Please ensure all fields are passed.\")\n    st.stop()\nelse:\n    st.sidebar.markdown(f\"### Respondent Info\")\n    st.sidebar.markdown(f\"- **Student Number:** {student_number}\")\n    st.sidebar.markdown(f\"- **Name:** {name}\")\n    st.sidebar.markdown(f\"- **Company:** {company}\")",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "interview_previously_completed",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "interview_previously_completed = check_if_interview_completed(\n    config.TIMES_DIRECTORY, st.session_state.username\n)\n# If app started but interview was previously completed\nif interview_previously_completed and not st.session_state.messages:\n    st.session_state.interview_active = False\n    st.markdown(\"Interview already completed.\")\n# Add 'Quit' button to dashboard\ncol1, col2 = st.columns([0.85, 0.15])\nwith col2:",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "client = (\n    OpenAI(api_key=st.secrets[\"API_KEY\"])\n    if api == \"openai\"\n    else anthropic.Anthropic(api_key=st.secrets[\"API_KEY\"])\n)\napi_kwargs = {\n    \"messages\": st.session_state.messages,\n    \"model\": config.MODEL,\n    \"max_tokens\": config.MAX_OUTPUT_TOKENS,\n    \"temperature\": config.TEMPERATURE,",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "api_kwargs",
        "kind": 5,
        "importPath": "code.interview",
        "description": "code.interview",
        "peekOfCode": "api_kwargs = {\n    \"messages\": st.session_state.messages,\n    \"model\": config.MODEL,\n    \"max_tokens\": config.MAX_OUTPUT_TOKENS,\n    \"temperature\": config.TEMPERATURE,\n}\n# If no messages, initialize conversation\nif not st.session_state.messages:\n    st.session_state.messages.append(\n        {\"role\": \"system\", \"content\": config.SYSTEM_PROMPT}",
        "detail": "code.interview",
        "documentation": {}
    },
    {
        "label": "check_password",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_password():\n    \"\"\"Returns 'True' if the user has entered a correct password.\"\"\"\n    def login_form():\n        \"\"\"Form with widgets to collect user information\"\"\"\n        with st.form(\"Credentials\"):\n            st.text_input(\"Username\", key=\"username\")\n            st.text_input(\"Password\", type=\"password\", key=\"password\")\n            st.form_submit_button(\"Log in\", on_click=password_entered)\n    def password_entered():\n        \"\"\"Checks whether username and password entered by the user are correct.\"\"\"",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "check_if_interview_completed",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def check_if_interview_completed(directory, username):\n    \"\"\"Check if interview transcript/time file exists which signals that interview was completed.\"\"\"\n    # Test account has multiple interview attempts\n    if username != \"testaccount\":\n        # Check if file exists\n        try:\n            with open(os.path.join(directory, f\"{username}.txt\"), \"r\") as _:\n                return True\n        except FileNotFoundError:\n            return False",
        "detail": "code.utils",
        "documentation": {}
    },
    {
        "label": "save_interview_data",
        "kind": 2,
        "importPath": "code.utils",
        "description": "code.utils",
        "peekOfCode": "def save_interview_data(\n    username,\n    transcripts_directory,\n    times_directory,\n    file_name_addition_transcript=\"\",\n    file_name_addition_time=\"\",\n):\n    \"\"\"Write interview data (transcript and time) to disk.\"\"\"\n    # Store chat transcript\n    with open(",
        "detail": "code.utils",
        "documentation": {}
    }
]